<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regression | Cong Peng</title>
    <link>https://pcx.linkedinfo.co/tags/regression/</link>
      <atom:link href="https://pcx.linkedinfo.co/tags/regression/index.xml" rel="self" type="application/rss+xml" />
    <description>Regression</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2014–2019 Cong Peng</copyright><lastBuildDate>Tue, 11 Jun 2019 17:38:33 +0200</lastBuildDate>
    <image>
      <url>https://pcx.linkedinfo.co/img/icon-192.png</url>
      <title>Regression</title>
      <link>https://pcx.linkedinfo.co/tags/regression/</link>
    </image>
    
    <item>
      <title>Explore the house prices kaggle competition</title>
      <link>https://pcx.linkedinfo.co/post/houseprice/</link>
      <pubDate>Tue, 11 Jun 2019 17:38:33 +0200</pubDate>
      <guid>https://pcx.linkedinfo.co/post/houseprice/</guid>
      <description>&lt;p&gt;Thanks to [pmarcelino](&lt;a href=&#34;https://www.kaggle.com/pmarcelino&#34;&gt;https://www.kaggle.com/pmarcelino&lt;/a&gt;
/comprehensive-data-exploration-with-python) and
&lt;a href=&#34;https://www.kaggle.com/serigne/stacked-regressions-top-4-on-leaderboard&#34;&gt;serigne&lt;/a&gt; for their great work.&lt;/p&gt;
&lt;p&gt;This is my second kaggle competition to practice on the knowledge of data
analysis and machine learning. Unlike the Titanic competition, this house
prices is a regression problem. So there will be much difference from the
previous binary classification. For this competition, we will have 79
variables that describe various aspects of a house and with a price in the
training data set. And then predict the prices of houses in the testing set
based on the 79 variables. This will be a long journey with the 79 variables.
So let&amp;rsquo;s start to explore the data with the data description.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#75715e&#34;&gt;# from typing import List, Union&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# from pysnooper import snoop&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# import matplotlib.pyplot as plt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# import numpy as np&lt;/span&gt;

loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;house price&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; loc:
    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(loc)

df_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input/train.csv&amp;#39;&lt;/span&gt;)
df_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input/test.csv&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;data-exploration&#34;&gt;Data exploration&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s firstly have a look at the data we have.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
df_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;(1460, 81)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
df_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;(1459, 80)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So we have 1460 rows in training set and 1459 rows in testing
set. Besides the price col in the training set, both data sets have 79 cols of
variables + 1 col of &amp;lsquo;Id&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;check-missing-values&#34;&gt;Check missing values&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s check if there is any missing value in the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cols_missing_value&lt;/span&gt;(df):
    df_null_sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnull()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum()
    df_na &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnull()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum() &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(df)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
    missing_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Missing Ratio %&amp;#39;&lt;/span&gt;: df_na,
                              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total&amp;#39;&lt;/span&gt;: df_null_sum}, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; missing_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(missing_data[missing_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
                             )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total&amp;#39;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)


cols_missing_value(df_train)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cols_missing_value(pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat((df_train[df_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns], df_test)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;There are quite a lot of missing values, some cols are missing almost all of the data. We need to handle the missing values by imputation or other methods later.&lt;/p&gt;
&lt;h2 id=&#34;a-look-at-distributions&#34;&gt;A look at distributions&lt;/h2&gt;
&lt;p&gt;As we&amp;rsquo;re predicting the &amp;lsquo;SalePrice&amp;rsquo;, so we should have a look at the stats of
this col.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;count      1460.000000
mean     180921.195890
std       79442.502883
min       34900.000000
25%      129975.000000
50%      163000.000000
75%      214000.000000
max      755000.000000
Name: SalePrice, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x11414e4a8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_12_1.svg&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;The values of &amp;lsquo;SalePrice&amp;rsquo; does fall in a normal distribution. In general, learning algorithms benefit from standardization of the data set. So we&amp;rsquo;ll transform the target values by &lt;code&gt;QuantileTransformer&lt;/code&gt; and &lt;code&gt;TransformedTargetRegressor&lt;/code&gt; later when training and testing.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s have a look at other columns&amp;rsquo; skewnesses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.stats &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; skew

&lt;span style=&#34;color:#75715e&#34;&gt;# Concat training and testing sets together to see the full picture&lt;/span&gt;
df_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat((df_train, df_test))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(
    drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)

numeric_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_dtypes(
    exclude&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns

&lt;span style=&#34;color:#75715e&#34;&gt;# Check the skewness of the numerical cols&lt;/span&gt;
skewed_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[numeric_cols]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; col: skew(col))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

skewness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Skewness&amp;#39;&lt;/span&gt;: skewed_cols})
skewness&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

skewness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skewness[abs(skewness[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Skewness&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{skewness.shape[0]} skewed numerical columns.&amp;#39;&lt;/span&gt;)

df_all[skewness&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;/Users/pcx/.pyenv/versions/ml/lib/python3.7/site-packages/ipykernel_launcher.py:5: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version
of pandas will change to not sort by default.

To accept the future behavior, pass &#39;sort=False&#39;.

To retain the current behavior and silence the warning, pass &#39;sort=True&#39;.

  &amp;quot;&amp;quot;&amp;quot;
15 skewed numerical columns.


array([[&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x1209d3550&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x1041d86d8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x104200c50&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x104233208&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120b97780&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120bc1cf8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120bef2b0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120c17860&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120c17898&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120c71358&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120f2a8d0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120f53e48&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120f84400&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120fac978&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x120fd3ef0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x1210054a8&amp;gt;]],
      dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_14_2.svg&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;We also need to handle the skewed variables later.&lt;/p&gt;
&lt;h1 id=&#34;preprocessing-data&#34;&gt;Preprocessing data&lt;/h1&gt;
&lt;h2 id=&#34;impute-missing-values&#34;&gt;Impute missing values&lt;/h2&gt;
&lt;p&gt;There are quite a lot of missing values, some cols are missing almost all of
the data. Now look into the data description to see what the variables really
are and how should we deal with them.
We&amp;rsquo;re now concating the training set and testing set since we need to handle
the missing values in both data sets. We will split them when we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# keep Id col for later unpack training and testing df&lt;/span&gt;
ids_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;]
ids_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_test[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;]
Y_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
df_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat((df_train, df_test))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(
    drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;/Users/pcx/.pyenv/versions/ml/lib/python3.7/site-packages/ipykernel_launcher.py:6: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version
of pandas will change to not sort by default.

To accept the future behavior, pass &#39;sort=False&#39;.

To retain the current behavior and silence the warning, pass &#39;sort=True&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lsquo;PoolQC&amp;rsquo; (Pool quality) is the one with most missing values, and NA stands for &amp;ldquo;No Pool&amp;rdquo; (described in data_description.txt), so the missing values should be replaced by str &amp;ldquo;No Pool&amp;rdquo;. And this col should be an ordered categorical variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PoolQC&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PoolQC&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Pool&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same applies to &amp;lsquo;MiscFeature&amp;rsquo;, &amp;lsquo;Alley&amp;rsquo;, &amp;lsquo;Fence&amp;rsquo;, &amp;lsquo;FireplaceQu&amp;rsquo;,
&amp;lsquo;GarageType&amp;rsquo;, &amp;lsquo;GarageFinish&amp;rsquo;, &amp;lsquo;GarageQual&amp;rsquo;, &amp;lsquo;GarageCond&amp;rsquo;, &amp;lsquo;BsmtQual&amp;rsquo;,
&amp;lsquo;BsmtCond&amp;rsquo;, &amp;lsquo;BsmtExposure&amp;rsquo;, &amp;lsquo;BsmtFinType1&amp;rsquo;, &amp;lsquo;BsmtFinType2&amp;rsquo;, &amp;lsquo;MasVnrType&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MiscFeature&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MiscFeature&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alley&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alley&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Alley access&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fence&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fence&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Fence&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FireplaceQu&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FireplaceQu&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Fireplace&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageType&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Garage&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageFinish&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageFinish&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Garage&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageQual&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageQual&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Garage&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageCond&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageCond&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Garage&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtCond&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtCond&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Basement&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtQual&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtQual&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Basement&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtExposure&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtExposure&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Basement&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtFinType1&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtFinType1&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Basement&amp;#34;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtFinType2&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtFinType2&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Basement&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s check &amp;lsquo;GarageYrBlt&amp;rsquo;, &amp;lsquo;GarageArea&amp;rsquo;, &amp;lsquo;GarageCars&amp;rsquo;.
Since only 1 record of &amp;lsquo;GarageCars&amp;rsquo; is missing, and it&amp;rsquo;s &amp;lsquo;GarageType&amp;rsquo; is
&amp;lsquo;Detchd&amp;rsquo;, so let&amp;rsquo;s make it as size of the mode/median of &amp;lsquo;GarageCars&amp;rsquo; when
type is &amp;lsquo;Detchd&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all[df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageCars&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnull()]
df_all[df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageCars&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnull()][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageType&amp;#39;&lt;/span&gt;]
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageCars&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageCars&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(
    int(df_all[df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Detchd&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageCars&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mode()))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s the same record for the missing &amp;lsquo;GarageArea&amp;rsquo; value, as we filled its
&amp;lsquo;GarageCars&amp;rsquo; to the mode value, we will fill the area as the mean value of
&amp;lsquo;GarageArea&amp;rsquo; where the &amp;lsquo;GarageCars&amp;rsquo; == mode value of &amp;lsquo;Detchd&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all[df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageArea&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnull()]
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageArea&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageArea&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(
    df_all[df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Detchd&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageArea&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean())

&lt;span style=&#34;color:#75715e&#34;&gt;# df_all[df_all[&amp;#39;GarageYrBlt&amp;#39;].isnull()][&amp;#39;GarageType&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the records that have no garage, we set the null value of &amp;lsquo;GarageYrBlt&amp;rsquo;
to 0, but for the records with type &amp;lsquo;Detchd&amp;rsquo;, we set the null value to the median
value of the built year with type &amp;lsquo;Detchd&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;year_median &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Detchd&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageYrBlt&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;median()
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageYrBlt&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageYrBlt&amp;#39;&lt;/span&gt;][
    df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Detchd&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(year_median)

df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageYrBlt&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GarageYrBlt&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since there are quite many missing value for &amp;lsquo;LotFrontage&amp;rsquo; (16.65%), we would drop this col.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LotFrontage&amp;#39;&lt;/span&gt;, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Filling with 0 for those likely to be 0.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bsmt_zero_missing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtFinSF1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtFinSF2&amp;#39;&lt;/span&gt;,
                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtUnfSF&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TotalBsmtSF&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtFullBath&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BsmtHalfBath&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bsmt_zero_missing:
    df_all[col] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[col]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lsquo;MasVnrArea&amp;rsquo; and &amp;lsquo;MasVnrType&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all[df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrType&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnull()][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrArea&amp;#39;&lt;/span&gt;]
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrType&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value_counts()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;None       1742
BrkFace     879
Stone       249
BrkCmn       25
Name: MasVnrType, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For all the records with missing values of &amp;lsquo;MasVnrType&amp;rsquo;, 1 record with
&amp;lsquo;MasVnrArea&amp;rsquo; is not NaN, so we filling its type as &amp;lsquo;BrkFace&amp;rsquo;, which is the
most occurred none-None type. Other missing values of &amp;lsquo;MasVnrType&amp;rsquo; we will
fill in with the most common &lt;code&gt;None&lt;/code&gt;, so its &amp;lsquo;MasVnrArea&amp;rsquo; will be 0.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrType&amp;#39;&lt;/span&gt;][
    df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrArea&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notna()]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BrkFace&amp;#39;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrType&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;None&amp;#39;&lt;/span&gt;)
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrArea&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MasVnrArea&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set the NaN to the mostly occurred value &amp;lsquo;RL&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MSZoning&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value_counts()
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MSZoning&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MSZoning&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RL&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set the NaN to the mostly occurred value &amp;#39;AllPub&amp;#39;.&lt;/span&gt;
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Utilities&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value_counts()
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Utilities&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Utilities&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AllPub&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# keep or not?&lt;/span&gt;
df_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Utilities&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set NaN to mostly occurred value for the rest cols.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cols_nan_mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Functional&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Electrical&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;KitchenQual&amp;#39;&lt;/span&gt;,
                 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Exterior1st&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Exterior2nd&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SaleType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MSSubClass&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cols_nan_mode:
    df_all[col] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[col]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(df_all[col]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mode()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

cols_missing_value(df_all)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now there&amp;rsquo;s no missing values. Let&amp;rsquo;s move to the next part.&lt;/p&gt;
&lt;h2 id=&#34;transform-categorical-variables&#34;&gt;Transform categorical variables&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll firstly transform some of the variables from numerical to categorical as
they should be. And add one variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cols_num_cat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MSSubClass&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;YrSold&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MoSold&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cols_num_cat:
    df_all[col] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[col]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Adding total sqfootage feature&lt;/span&gt;
df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TotalSF&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TotalBsmtSF&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; \
    df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1stFlrSF&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; df_all[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2ndFlrSF&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;check-and-handle-outliers&#34;&gt;Check and handle outliers&lt;/h2&gt;
&lt;p&gt;After handling the missing values, now we have a look at if there are outliers
in the training set with the target variable by scatter plots.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

df_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[:len(ids_train)]
df_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[len(ids_train):]

cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_dtypes([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;float64&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# cols = df_train.select_dtypes([&amp;#39;int64&amp;#39;, &amp;#39;float64&amp;#39;])&lt;/span&gt;
df_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df_train, pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(
    Y_train, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;])], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)

fig, axes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(cols):
    df_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;col, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;, ax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;axes[i &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;output_44_0.svg&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;The continuous variable &amp;lsquo;GrLivArea&amp;rsquo; seems having 2 values have very
different &amp;ldquo;hehavior&amp;rdquo;. The 2 bottom right dots may be very inferential that
have quite big areas but low prices. Let&amp;rsquo;s remove them to see if it&amp;rsquo;s better
for the results. After removing these 2 rows, we would see that outliers in
other cols such &amp;lsquo;TotalBsmtSF&amp;rsquo; and &amp;lsquo;TotalSF&amp;rsquo; are disappeared as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(df_train[(df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GrLivArea&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
                                  (df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250000&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Packing back data sets after removing outliers in training set.&lt;/span&gt;
ids_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;]
ids_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_test[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;]
Y_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_train[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
df_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat((df_train, df_test))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(
    drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;transform-skewed-variables&#34;&gt;Transform skewed variables&lt;/h2&gt;
&lt;p&gt;We will transform the skewed variables into normal distributions by
&lt;code&gt;quantile_transform&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;numeric_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_dtypes(
    exclude&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns

&lt;span style=&#34;color:#75715e&#34;&gt;# Check the skewnesses of the numerical cols&lt;/span&gt;
skewed_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[numeric_cols]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; col: skew(col))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

skewness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Skewness&amp;#39;&lt;/span&gt;: skewed_cols})

skewness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skewness[abs(skewness[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Skewness&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{skewness.shape[0]} skewed numerical columns.&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; quantile_transform
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

skewed_features &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skewness&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
df_all[skewed_features] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quantile_transform(
    df_all[skewed_features], output_distribution&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;normal&amp;#39;&lt;/span&gt;, copy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;20 skewed numerical columns.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check again for the skewnesses of the numerical cols&lt;/span&gt;
skewed_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[numeric_cols]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; col: skew(col))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

skewness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Skewness&amp;#39;&lt;/span&gt;: skewed_cols})

skewness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; skewness[abs(skewness[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Skewness&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{skewness.shape[0]} skewed numerical columns.&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;11 skewed numerical columns.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;encode-categorical-valuee&#34;&gt;Encode categorical valuee&lt;/h2&gt;
&lt;p&gt;Transform categorical cols by using &lt;code&gt;pd.get_dummies()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df_all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;span style=&#34;color:#75715e&#34;&gt;# Column names in the DataFrame to be encoded. If columns is None then all the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# columns with object or category dtype will be converted.&lt;/span&gt;
df_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_dummies(df_all)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df_all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;(2917, 79)
(2917, 330)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;training-and-testing&#34;&gt;Training and testing&lt;/h1&gt;
&lt;h2 id=&#34;base-model&#34;&gt;Base model&lt;/h2&gt;
&lt;p&gt;Now we will start to train and test with a base model with default parameters
to see how it would perform as a base line.
Root-Mean-Squared-Error (RMSE) as the evaluation metric for the competition, the equation is:&lt;/p&gt;
&lt;p&gt;$$\operatorname{RMSE}(y, \hat{y})=\sqrt{\frac{1}{n_{\text {samples }}} \sum_{i=0}^{n_{\text {symples }}-1}\left(y_{i}-\hat{y}_{i}\right)^{2}}$$.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Unpack training and testing data sets&lt;/span&gt;
df_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[:len(ids_train)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)
df_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_all[len(ids_train):]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;)

X_train &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
X_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.pipeline &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Pipeline
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Lasso, ElasticNet, Ridge
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cross_val_score
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mean_squared_error, make_scorer
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.compose &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; TransformedTargetRegressor
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QuantileTransformer

Y_train_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log1p(Y_train)

&lt;span style=&#34;color:#75715e&#34;&gt;# there&amp;#39;s no implementation of RMSE in the scikit-learn library, so we have to&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# define a scorer of RMSE&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rmse_cal&lt;/span&gt;(y_true, y_pred):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(mean_squared_error(y_true, y_pred))
    &lt;span style=&#34;color:#75715e&#34;&gt;# return np.sqrt(np.sum(np.square(y_pred - y_true)) / len(y_pred))&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# if the custom score function is a loss (greater_is_better=False), the output&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# of the python function is negated by the scorer object, conforming to the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# cross validation convention that scorers return higher values for better&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# models.&lt;/span&gt;
rmse &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_scorer(rmse_cal, greater_is_better&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

&lt;span style=&#34;color:#75715e&#34;&gt;# ridgepip = Pipeline([&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# (&amp;#39;tran&amp;#39;, TransformedTargetRegressor(&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     regressor=Lasso(), func=np.log1p, inverse_func=np.expm1)),&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# (&amp;#39;tran&amp;#39;, TransformedTargetRegressor(&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     regressor=Ridge(), func=np.log1p, inverse_func=np.expm1)),&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ])&lt;/span&gt;

models &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    Lasso(),
    &lt;span style=&#34;color:#75715e&#34;&gt;# ridgepip,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# # ElasticNet(),&lt;/span&gt;
    Ridge(),
]

CV &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; models:
    scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cross_val_score(m, X_train, Y_train_norm,
                              scoring&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rmse, cv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{type(m).__name__}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
          f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Scores: {scores}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;# +/-std*2 for 95% confidence interval&lt;/span&gt;
          f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accuracy: {scores.mean(): 0.4f} (+/-{scores.std() * 2: 0.4f})&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
          f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;-&amp;#34;*20}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Lasso
Scores: [0.22425222 0.23934427 0.23998284 0.24165163 0.23227816]
Accuracy:  0.2355 (+/- 0.0129)
--------------------
Ridge
Scores: [0.11456344 0.12197379 0.13560006 0.1083432  0.1172416 ]
Accuracy:  0.1195 (+/- 0.0183)
--------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gridsearch-for-best-model-with-best-parameters&#34;&gt;GridSearch for best model with best parameters&lt;/h2&gt;
&lt;p&gt;The base models give somehow good results. The CV RMSE score of the /Ridge/
model is around the top-1000 in the competition&amp;rsquo;s leaderboard. Now let&amp;rsquo;s try
to find the best parameters for these and other models with &lt;code&gt;GridSearchCV&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.svm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SVR
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.pipeline &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Pipeline
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; RobustScaler
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.kernel_ridge &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; KernelRidge
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; train_test_split, GridSearchCV
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.ensemble &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; GradientBoostingRegressor
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; metrics


Y_train_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log1p(Y_train)

X_train_cv, X_test_cv, Y_train_cv, Y_test_cv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(
    X_train, Y_train_norm, test_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)


param_space &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rob_lasso&amp;#39;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;: Pipeline([(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sca&amp;#39;&lt;/span&gt;, RobustScaler()), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;, Lasso())]),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model__alpha&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00005&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0004&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0005&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.005&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
        }
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ridge&amp;#39;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;: Ridge(),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1e-3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1e-2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1e-1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;],
        }
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kernel_ridge&amp;#39;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;: KernelRidge(),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1e-3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1e-2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1e-1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;],
        }
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elastic_net&amp;#39;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;: Pipeline([(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sca&amp;#39;&lt;/span&gt;, RobustScaler()), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;, ElasticNet())]),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model__alpha&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00005&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0004&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0005&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.005&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
            &lt;span style=&#34;color:#75715e&#34;&gt;# Note that a good choice of list of values for l1_ratio is often to&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# put more values close to 1 (i.e. Lasso) and less close to 0 (i.e.&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# Ridge)&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model__l1_ratio&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
        }
    },
    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;gboost&amp;#39;: {&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#39;model&amp;#39;: GradientBoostingRegressor(),&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#39;params&amp;#39;: {&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#39;loss&amp;#39;: [&amp;#39;ls&amp;#39;, &amp;#39;lad&amp;#39;, &amp;#39;huber&amp;#39;, &amp;#39;quantile&amp;#39;],&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#39;learning_rate&amp;#39;: [0.01, 0.1],&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#39;n_estimators&amp;#39;: [100, 500, 1000, 3000],&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#39;max_depth&amp;#39;: [2, 3, 4],&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#39;min_samples_split&amp;#39;: [2, 5, 10],&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# },&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;svr&amp;#39;: {&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#39;model&amp;#39;: SVR(),&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#39;params&amp;#39;: {&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#39;kernel&amp;#39;: [&amp;#39;linear&amp;#39;, &amp;#39;rbf&amp;#39;],&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#39;C&amp;#39;: [1, 10],&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# },&lt;/span&gt;
}

gs_rec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# grid search parameters&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name, pair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; param_space&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{name}---------------&amp;#39;&lt;/span&gt;)
    gs_rg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GridSearchCV(pair[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;], pair[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;],
                         scoring&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rmse, cv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CV, error_score&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    gs_rg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, Y_train_norm)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(gs_rg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;best_params_)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(gs_rg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;best_score_)

    gs_rg_cv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GridSearchCV(pair[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;], pair[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;],
                            scoring&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rmse, cv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CV, error_score&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_jobs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    gs_rg_cv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train_cv, Y_train_cv)
    pred_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gs_rg_cv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test_cv)
    y_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rmse_cal(Y_test_cv, pred_test)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(gs_rg_cv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;best_params_)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(gs_rg_cv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;best_score_)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y_score)

    gs_rec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append({
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: name,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;: gs_rg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;best_params_,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gs_rg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;best_score_,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cv_test_params&amp;#39;&lt;/span&gt;: gs_rg_cv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;best_params_,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cv_test_score&amp;#39;&lt;/span&gt;: y_score
    })

df_gs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(gs_rec, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;,
                                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cv_test_score&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cv_test_params&amp;#39;&lt;/span&gt;]
                     )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cv_test_score&amp;#39;&lt;/span&gt;])
df_gs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;rob_lasso---------------
{&#39;model__alpha&#39;: 0.0005}
-0.1108321642082426
{&#39;model__alpha&#39;: 0.0005}
-0.11385591248537665
0.1092651116732159
ridge---------------
{&#39;alpha&#39;: 10}
-0.11417733254437629
{&#39;alpha&#39;: 10}
-0.11723423641202352
0.11022009984391984
kernel_ridge---------------
{&#39;alpha&#39;: 10}
-0.11675117173959225
{&#39;alpha&#39;: 10}
-0.1209044169077714
0.11171230919473786
elastic_net---------------
{&#39;model__alpha&#39;: 0.0005, &#39;model__l1_ratio&#39;: 0.9}
-0.11081242246612653
{&#39;model__alpha&#39;: 0.0007, &#39;model__l1_ratio&#39;: 0.8}
-0.1138195082928615
0.10934894252124043
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now let&amp;rsquo;s Train with the best model so far and predict on the test data. As
aforementioned, the values of &amp;lsquo;SalePrice&amp;rsquo; does fall in a normal distribution.
So we&amp;rsquo;ll transform the target values by &lt;code&gt;QuantileTransformer&lt;/code&gt; and
&lt;code&gt;TransformedTargetRegressor&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime


&lt;span style=&#34;color:#75715e&#34;&gt;# model = Pipeline(&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     [(&amp;#39;sca&amp;#39;, RobustScaler()), (&amp;#39;model&amp;#39;, TransformedTargetRegressor(&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         regressor=ElasticNet(alpha=0.0005, l1_ratio=0.85), func=np.log1p, inverse_func=np.expm1))])&lt;/span&gt;
model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pipeline(
    [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sca&amp;#39;&lt;/span&gt;, RobustScaler()), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;, TransformedTargetRegressor(
        regressor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ElasticNet(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0005&lt;/span&gt;, l1_ratio&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt;),
        &lt;span style=&#34;color:#75715e&#34;&gt;# regressor=Lasso(alpha=0.0005),&lt;/span&gt;
        transformer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;QuantileTransformer(output_distribution&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;normal&amp;#39;&lt;/span&gt;)))])

model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train, Y_train)

pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_test)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit&lt;/span&gt;(ids, pred, suffix):
    sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
    sub[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ids_test
    sub[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SalePrice&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pred
    timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_%H-%M-%S&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# sub.to_csv(&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# f&amp;#39;result/kaggle1_sub_{suffix}_{score:.5f}.csv&amp;#39;, index=False)&lt;/span&gt;
    sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(
        f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submissions/{suffix}_{timestamp}.csv.gz&amp;#39;&lt;/span&gt;, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False,
        compression&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gzip&amp;#39;&lt;/span&gt;)


submit(ids_test, pred, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elastic_net&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
